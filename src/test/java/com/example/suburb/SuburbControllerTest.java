package com.example.suburb;

import com.example.suburb.model.PostcodeRange;
import com.example.suburb.model.Suburb;
import com.example.suburb.model.SuburbsInformation;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(SuburbController.class)
public class SuburbControllerTest {
    @Autowired
    MockMvc mockMvc;

    @MockBean
    SuburbService suburbService;

    @Test
    public void testSaveSuburbs_whenOneSuburbPosted_thenCallsSuburbService() throws Exception {

        String requestBody = "[\n" +
                "  {\n" +
                "    \"name\": \"Perth\",\n" +
                "    \"postcode\": 6000\n" +
                "  }\n" +
                "]";

        Suburb perth = Suburb.builder()
                .name("Perth")
                .postcode(6000)
                .build();

        when(suburbService.saveSuburbs(any(List.class))).thenReturn(Arrays.asList(perth));

        MockHttpServletRequestBuilder mockRequest = MockMvcRequestBuilders
                .post("/suburb/save")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .content(requestBody);


        mockMvc.perform(mockRequest)
                .andExpect(status().isOk())
                //id is autogenerated, so we just check for existence
                .andExpect(jsonPath("$[0].id").exists())
                .andExpect(jsonPath("$[0].name").value("Perth"))
                .andExpect(jsonPath("$[0].postcode").value("6000"))
                .andReturn();

        verify(suburbService).saveSuburbs(any(List.class));
    }

    @Test
    public void testRetrieveSuburbsInformation_whenGivenPostcodeRange_thenCallSuburbsService() throws Exception {

        String requestBody = "{\n" +
                "    \"start\": 2000,\n" +
                "    \"end\": 2002\n" +
                "}";


        SuburbsInformation suburbsInformation = SuburbsInformation.builder()
                .totalNoOfCharacters(10)
                .names(Arrays.asList("Sydney", "Barangaroo"))
                .build();

        when(suburbService.retrieveSuburbs(any(PostcodeRange.class))).thenReturn(suburbsInformation);

        MockHttpServletRequestBuilder mockRequest = MockMvcRequestBuilders
                .post("/suburb/retrieve")
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .content(requestBody);


        mockMvc.perform(mockRequest)
                .andExpect(status().isOk())
                .andReturn();

        verify(suburbService).retrieveSuburbs(any(PostcodeRange.class));
    }
}
